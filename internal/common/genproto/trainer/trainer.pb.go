// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trainer.proto

package trainer

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsHourAvailableRequest struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IsHourAvailableRequest) Reset()         { *m = IsHourAvailableRequest{} }
func (m *IsHourAvailableRequest) String() string { return proto.CompactTextString(m) }
func (*IsHourAvailableRequest) ProtoMessage()    {}
func (*IsHourAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df4ffdae7cc5e40, []int{0}
}

func (m *IsHourAvailableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHourAvailableRequest.Unmarshal(m, b)
}
func (m *IsHourAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHourAvailableRequest.Marshal(b, m, deterministic)
}
func (m *IsHourAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHourAvailableRequest.Merge(m, src)
}
func (m *IsHourAvailableRequest) XXX_Size() int {
	return xxx_messageInfo_IsHourAvailableRequest.Size(m)
}
func (m *IsHourAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHourAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsHourAvailableRequest proto.InternalMessageInfo

func (m *IsHourAvailableRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type IsHourAvailableResponse struct {
	IsAvailable          bool     `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsHourAvailableResponse) Reset()         { *m = IsHourAvailableResponse{} }
func (m *IsHourAvailableResponse) String() string { return proto.CompactTextString(m) }
func (*IsHourAvailableResponse) ProtoMessage()    {}
func (*IsHourAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df4ffdae7cc5e40, []int{1}
}

func (m *IsHourAvailableResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsHourAvailableResponse.Unmarshal(m, b)
}
func (m *IsHourAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsHourAvailableResponse.Marshal(b, m, deterministic)
}
func (m *IsHourAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsHourAvailableResponse.Merge(m, src)
}
func (m *IsHourAvailableResponse) XXX_Size() int {
	return xxx_messageInfo_IsHourAvailableResponse.Size(m)
}
func (m *IsHourAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsHourAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsHourAvailableResponse proto.InternalMessageInfo

func (m *IsHourAvailableResponse) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

type UpdateHourRequest struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateHourRequest) Reset()         { *m = UpdateHourRequest{} }
func (m *UpdateHourRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHourRequest) ProtoMessage()    {}
func (*UpdateHourRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df4ffdae7cc5e40, []int{2}
}

func (m *UpdateHourRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateHourRequest.Unmarshal(m, b)
}
func (m *UpdateHourRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateHourRequest.Marshal(b, m, deterministic)
}
func (m *UpdateHourRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHourRequest.Merge(m, src)
}
func (m *UpdateHourRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateHourRequest.Size(m)
}
func (m *UpdateHourRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHourRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHourRequest proto.InternalMessageInfo

func (m *UpdateHourRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df4ffdae7cc5e40, []int{3}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IsHourAvailableRequest)(nil), "trainer.IsHourAvailableRequest")
	proto.RegisterType((*IsHourAvailableResponse)(nil), "trainer.IsHourAvailableResponse")
	proto.RegisterType((*UpdateHourRequest)(nil), "trainer.UpdateHourRequest")
	proto.RegisterType((*EmptyResponse)(nil), "trainer.EmptyResponse")
}

func init() { proto.RegisterFile("trainer.proto", fileDescriptor_8df4ffdae7cc5e40) }

var fileDescriptor_8df4ffdae7cc5e40 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x41, 0x4f, 0x02, 0x31,
	0x10, 0x85, 0xc1, 0x18, 0x35, 0x83, 0x80, 0xf4, 0x80, 0x66, 0x2f, 0x60, 0x4f, 0x9e, 0x4a, 0x82,
	0x57, 0x2f, 0x86, 0x68, 0x96, 0x83, 0x97, 0x05, 0xbd, 0x9a, 0xee, 0x32, 0xae, 0x8d, 0xdd, 0x6d,
	0x6d, 0xbb, 0x24, 0xfe, 0x40, 0xff, 0x97, 0xa1, 0x6b, 0x37, 0x41, 0xf4, 0x82, 0xc7, 0x4e, 0xdf,
	0x7c, 0xef, 0xcd, 0x83, 0xae, 0x33, 0x5c, 0x94, 0x68, 0x98, 0x36, 0xca, 0x29, 0x72, 0xfc, 0xfd,
	0x8c, 0x46, 0xb9, 0x52, 0xb9, 0xc4, 0x89, 0x1f, 0xa7, 0xd5, 0xcb, 0xc4, 0x89, 0x02, 0xad, 0xe3,
	0x85, 0xae, 0x95, 0x34, 0x86, 0xe1, 0xdc, 0xc6, 0xaa, 0x32, 0xb7, 0x6b, 0x2e, 0x24, 0x4f, 0x25,
	0x26, 0xf8, 0x5e, 0xa1, 0x75, 0x84, 0xc1, 0xe1, 0x46, 0x7c, 0xd1, 0x1e, 0xb7, 0xaf, 0x3a, 0xd3,
	0x88, 0xd5, 0x24, 0x16, 0x48, 0x6c, 0x19, 0x48, 0x89, 0xd7, 0xd1, 0x1b, 0x38, 0xdf, 0x21, 0x59,
	0xad, 0x4a, 0x8b, 0xe4, 0x12, 0x4e, 0x85, 0x7d, 0xe6, 0x61, 0xee, 0x91, 0x27, 0x49, 0x47, 0xd8,
	0x46, 0x4a, 0x67, 0x30, 0x78, 0xd4, 0x2b, 0xee, 0x70, 0x43, 0xd8, 0x37, 0x42, 0x1f, 0xba, 0x77,
	0x85, 0x76, 0x1f, 0xc1, 0x78, 0xfa, 0x79, 0x00, 0xbd, 0x65, 0x5d, 0xc5, 0x02, 0xcd, 0x5a, 0x64,
	0x48, 0x9e, 0xa0, 0xff, 0x23, 0x26, 0x19, 0xb1, 0xd0, 0xde, 0xef, 0x55, 0x44, 0xe3, 0xbf, 0x05,
	0xb5, 0x11, 0x6d, 0x91, 0x18, 0xce, 0x16, 0xd9, 0x2b, 0xae, 0x2a, 0x89, 0xde, 0x51, 0x94, 0x39,
	0x89, 0x9a, 0xbd, 0x9d, 0xdb, 0xa2, 0x61, 0xf3, 0xb7, 0x15, 0x99, 0xb6, 0xc8, 0x3d, 0xf4, 0x66,
	0xbc, 0xcc, 0x50, 0xfe, 0x93, 0x33, 0x87, 0xc1, 0x03, 0x7f, 0xc3, 0xed, 0x5b, 0xf7, 0x42, 0xa5,
	0x47, 0xbe, 0xf2, 0xeb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0xc4, 0x9a, 0xd0, 0x67, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrainerServiceClient is the client API for TrainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainerServiceClient interface {
	IsHourAvailable(ctx context.Context, in *IsHourAvailableRequest, opts ...grpc.CallOption) (*IsHourAvailableResponse, error)
	ScheduleTraining(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CancelTraining(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	MakeHourAvailable(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type trainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerServiceClient(cc grpc.ClientConnInterface) TrainerServiceClient {
	return &trainerServiceClient{cc}
}

func (c *trainerServiceClient) IsHourAvailable(ctx context.Context, in *IsHourAvailableRequest, opts ...grpc.CallOption) (*IsHourAvailableResponse, error) {
	out := new(IsHourAvailableResponse)
	err := c.cc.Invoke(ctx, "/trainer.TrainerService/IsHourAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerServiceClient) ScheduleTraining(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/trainer.TrainerService/ScheduleTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerServiceClient) CancelTraining(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/trainer.TrainerService/CancelTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerServiceClient) MakeHourAvailable(ctx context.Context, in *UpdateHourRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/trainer.TrainerService/MakeHourAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServiceServer is the server API for TrainerService service.
type TrainerServiceServer interface {
	IsHourAvailable(context.Context, *IsHourAvailableRequest) (*IsHourAvailableResponse, error)
	ScheduleTraining(context.Context, *UpdateHourRequest) (*EmptyResponse, error)
	CancelTraining(context.Context, *UpdateHourRequest) (*EmptyResponse, error)
	MakeHourAvailable(context.Context, *UpdateHourRequest) (*EmptyResponse, error)
}

// UnimplementedTrainerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrainerServiceServer struct {
}

func (*UnimplementedTrainerServiceServer) IsHourAvailable(ctx context.Context, req *IsHourAvailableRequest) (*IsHourAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHourAvailable not implemented")
}
func (*UnimplementedTrainerServiceServer) ScheduleTraining(ctx context.Context, req *UpdateHourRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleTraining not implemented")
}
func (*UnimplementedTrainerServiceServer) CancelTraining(ctx context.Context, req *UpdateHourRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTraining not implemented")
}
func (*UnimplementedTrainerServiceServer) MakeHourAvailable(ctx context.Context, req *UpdateHourRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeHourAvailable not implemented")
}

func RegisterTrainerServiceServer(s *grpc.Server, srv TrainerServiceServer) {
	s.RegisterService(&_TrainerService_serviceDesc, srv)
}

func _TrainerService_IsHourAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHourAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).IsHourAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer.TrainerService/IsHourAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).IsHourAvailable(ctx, req.(*IsHourAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerService_ScheduleTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).ScheduleTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer.TrainerService/ScheduleTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).ScheduleTraining(ctx, req.(*UpdateHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerService_CancelTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).CancelTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer.TrainerService/CancelTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).CancelTraining(ctx, req.(*UpdateHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerService_MakeHourAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).MakeHourAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer.TrainerService/MakeHourAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).MakeHourAvailable(ctx, req.(*UpdateHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrainerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trainer.TrainerService",
	HandlerType: (*TrainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsHourAvailable",
			Handler:    _TrainerService_IsHourAvailable_Handler,
		},
		{
			MethodName: "ScheduleTraining",
			Handler:    _TrainerService_ScheduleTraining_Handler,
		},
		{
			MethodName: "CancelTraining",
			Handler:    _TrainerService_CancelTraining_Handler,
		},
		{
			MethodName: "MakeHourAvailable",
			Handler:    _TrainerService_MakeHourAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainer.proto",
}
